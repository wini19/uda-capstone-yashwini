version: 2.1

orbs:
    aws-cli: circleci/aws-cli@3.1.5
    kubernetes: circleci/kubernetes@1.3
    aws-eks: circleci/aws-eks@2.2.0

jobs:
    install_lint:
        docker:
            - image: python:3.7.3-stretch
            
        working_directory: ~/repo
        
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "requirements.txt" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
            - run:
                name: "Install py dependencies and hadolint"
                command: |
                
                    # REMOVE LATER #######
                    # python3 -m venv ~/.project
                    # . ~/.project/bin/activate
                    
                    # Configuring python virtual environment
                    python3 -m venv venv
                    . venv/bin/activate
                    
                    # Installing python dependencies and hadolint
                    make install
                    
            - save_cache:
                paths:
                    - ./venv
                key: v1-dependencies-{{ checksum "requirements.txt" }}
                
            - run:
                name: "Lint python app and Docker file"
                command: |
                    . venv/bin/activate
                    make lint
    
    build_publish_dockerimage:
        docker:
            - image: cimg/base:stable
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: "Create docker image"
                command: |
                    bash scripts/docker_build.sh
            - run:
                name: "Upload docker image to docker hub"
                command: bash scripts/docker_publish.sh $DOCKERHUB_PW
    
    #create EKS cluster if it does not exist
    create_cluster:
        docker:
            - image: python:3.7.3-stretch
        steps:
            - checkout
            - run:
                name: "Install dependencies for kubernetes"
                command: make install_kubernetes_tools
            - aws-cli/setup:
                aws-access-key-id: AWS_ACCESS_KEY
                aws-secret-access-key: AWS_SECRET_KEY
                aws-region: AWS_REGION
            - run:
                name: "Create EKS cluster"
                command: bash scripts/create_cluster.sh
            - run:
                name: Update kubectl config 
                command: |
                    aws eks update-kubeconfig --region us-east-1 --name capstone
    
    update_cluster:
        docker:
            - image: python:3.7.3-stretch
        steps:
            - checkout
            # - run:
            #     name: "Install kubectl"
            #     command: |
            #         curl -LO -k "https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl"
            #         install -o root -g root -m 0755 kubectl /.kubectl
            #         chmod +x /.kubectl
            - run:
                name: Install dependencies
                command: |
                    sudo apt-get update && sudo apt-get install -y
                    sudo apt-get install -y curl unzip
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "requirements.txt" }}
                    - v1-dependencies-
            - setup_remote_docker:
                version: 20.10.14
                docker_layer_caching: false
            # - aws-cli/setup:
            #     aws-access-key-id: AWS_ACCESS_KEY
            #     aws-secret-access-key: AWS_SECRET_KEY
            #     aws-region: AWS_REGION
            - run:
                name: set-credential
                command: |
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY
                    aws configure set aws_secret_access_key $AWS_SECRET_KEY
                    aws configure set region $AWS_REGION
            - kubernetes/install-kubectl
            - aws-eks/update-kubeconfig-with-authenticator:
                cluster-name: capstone
                # aws-region: ${AWS_REGION}
                install-kubectl: true
            - kubernetes/create-or-update-resource:
                resource-file-path: config/deploy_service.yml
                show-kubectl-command: true
            - run:
                name: Get details
                command: bash scripts/cluster_details.sh
                
            
    
workflows:
    default:
        jobs:
            - install_lint
            - build_publish_dockerimage:
                requires: [install_lint]
                filters:
                    branches:
                        only: [main]
            - create_cluster:
                requires: [build_publish_dockerimage]
            - update_cluster:
                requires: [create_cluster]    
            
            